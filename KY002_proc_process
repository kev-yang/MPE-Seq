#! /bin/bash
#$ -V
#$ -wd /scr1/users/yangk4/KY002/
#$ -l h_vmem=60G
#$ -l m_mem_free=60G
#$ -pe smp 16 -binding linear:16
module unload binutils
module load STAR
module load SRA-Toolkit
module load jdk
module load python/3.6
module load gcc8
module load SAMtools
#Now do real things
cd /scr1/users/yangk4/KY002/
for i in `cat lib_list`;
do
    echo "#unzip and cat all lanes"
    echo "cd /scr1/users/yangk4/KY002/" >> DL_and_process_$i 
    mkdir /scr1/users/yangk4/KY002//$i 
    echo "unpigz -p 8 $i*.gz" >> DL_and_process_$i
    echo "cat $i*R1*.fastq >> /scr1/users/yangk4/KY002/$i/$i\_1.fastq" >> DL_and_process_$i
    echo "cat $i*R2*.fastq >> /scr1/users/yangk4/KY002/$i/$i\_2.fastq" >> DL_and_process_$i
    echo "cd /scr1/users/yangk4/KY002//$i" >> DL_and_process_$i
    echo "mkdir STAR" >> DL_and_process_$i
    echo "#Run FASTQC"
    echo "mkdir ./fastqc_1" >> DL_and_process_$i
    echo "mkdir ./fastqc_2" >> DL_and_process_$i
    echo "/home/yangk4/FastQC/fastqc $i\_1.fastq -o ./fastqc_1 &" >> DL_and_process_$i
    echo "/home/yangk4/FastQC/fastqc $i\_2.fastq -o ./fastqc_2 &" >> DL_and_process_$i
    echo "wait" >> DL_and_process_$i
    echo "#Trim with BBDUK"
    echo "mkdir ./trimmed" >> DL_and_process_$i
    #right now, this command specifically does the following by flag
    #minlength trims to a length equivalent to max primer length, e.g. 28 for our libraries or 26 for Pleiss libraries.
    #ktrim=r is for right-trimming of Illumina adapter sequences
    #k=23 makes bbduk try to match 23-mers everywhere, #mink matches just the last 11-mer of the ends
    #Xmx specifices memory usage, 
    echo "/home/yangk4/bbmap/bbduk.sh ref=/home/yangk4/bbmap/resources/adapters.fa in1=$i\_1.fastq in2=$i\_2.fastq out1=./trimmed/$i\_1_trimmed.fastq out2=./trimmed/$i\_2_trimmed.fastq ktrim=r k=23 mink=11 hdist=1 tpe tbo qtrim=r trimq=20 qin=33 -Xmx30g threads=8" >> DL_and_process_$i
    echo "#Run FASTQC again"
    echo "mkdir ./trimmed/fastqc_1" >> DL_and_process_$i
    echo "mkdir ./trimmed/fastqc_2" >> DL_and_process_$i
    echo "/home/yangk4/FastQC/fastqc ./trimmed/$i\_1_trimmed.fastq -o ./trimmed/fastqc_1 &" >> DL_and_process_$i
    echo "/home/yangk4/FastQC/fastqc ./trimmed/$i\_2_trimmed.fastq -o ./trimmed/fastqc_2 &" >> DL_and_process_$i
    echo "#Run UMI Tools Extract"
    echo "source /home/yangk4/majiq_2_install/env/bin/activate" >> DL_and_process_$i
    echo "umi_tools extract -I ./trimmed/$i\_1_trimmed.fastq --bc-pattern=NNNNNNN --read2-in=./trimmed/$i\_2_trimmed.fastq --stdout=$i\_1_extract.fastq --read2-out=$i\_2_extract.fastq --log=$i\_UMI_extracted.log" >> DL_and_process_$i
    echo "deactivate" >> DL_and_process_$i
    echo "Run STAR"
    echo "STAR --genomeDir /scr1/users/yangk4/ref/genomes/hg38/  --readFilesIn ./$i\_1_extract.fastq ./$i\_2_extract.fastq --runThreadN 8 --outSAMtype BAM Unsorted --outFileNamePrefix ./$i. --outSAMattributes All --alignSJoverhangMin 8 --outReadsUnmapped Fastx" >> DL_and_process_$i
    echo "#Remove PCR Duplicates"
    echo "samtools sort -@ 7 -o $i.Aligned.sorted.bam $i.Aligned.out.bam" >> DL_and_process_$i
    echo "samtools index ./$i.Aligned.sorted.bam" >> DL_and_process_$i
    echo "source /home/yangk4/majiq_2_install/env/bin/activate" >> DL_and_process_$i
    echo "umi_tools dedup -I $i.Aligned.sorted.bam --paired -S $i\_deduplicated.bam --log=$i\_UMI_deduplicated.log" >> DL_and_process_$i
    echo "deactivate" >> DL_and_process_$i
    echo "#Index with samtools for MAJIQ"
    echo "samtools index $i\_deduplicated.bam" >> DL_and_process_$i
    echo "#Copy duplicate for rMATS"
    echo "cp ${i}_deduplicated.bam ${i}_deepfake.bam" >> DL_and_process_$i
    echo "#Run bedtools" >> DL_and_process_$i
    echo "#Run rMATS" >> DL_and_process_$i
    echo "source /home/yangk4/rmats_install/rmatsenv/bin/activate" >> DL_and_process_$i
    echo "${i}_deduplicated.bam" >> ./$i/DL_and_process_${i}_b1
    echo "${i}_deepfake.bam" >> ./$i/DL_and_process_${i}_b2
    echo "mkdir ./rMATS_$i" >> DL_and_process_$i
    echo "python2 /home/yangk4/rmats_install/rMATS.4.0.2/rMATS-turbo-Linux-UCS2/rmats.py --b1 DL_and_process_${i}_b1 --b2 DL_and_process_${i}_b2 --gtf /scr1/users/yangk4/ref/db/gencode.v31.annotation.gtf --od ./rMATS_$i --nthread 8" >> DL_and_process_$i
    echo "deactivate" >> DL_and_process_$i
    echo "#Run MAJIQ" >> DL_and_process_$i
    echo "source /home/yangk4/majiq_2_install/env/bin/activate" >> DL_and_process_$i
    mkdir ./$i/majiq_$i
    echo -e "[info]\nreadlen=150\nbamdirs=./\ngenome=hg38\ngenome_path=/scr1/users/yangk4/ref/genomes/hg38/\n[experiments]\nWT=${i}_deduplicated" >> ./$i/majiq_$i/settings.txt
    echo "majiq build /scr1/users/yangk4/ref/db/gencode.v31.annotation.gff3 -c ./majiq_$i/settings.txt --output ./majiq_$i/build --nproc 8" >> DL_and_process_$i
    echo "majiq psi ./majiq_$i/build/$i\_deduplicated.majiq --nproc 8 --output ./majiq_$i --name $i" >> DL_and_process_$i
    echo "voila tsv -f ./majiq_$i/$i.psi.voila ./majiq_$i/build/splicegraph.sql -f ./majiq_$i/voila/$i" >> DL_and_process_$i
    echo "deactivate" >> DL_and_process_$i
done

#Processing chunk 0
bash DL_and_process_TSO-RepA-Stim &
bash DL_and_process_TSO-RepC-Unstim &
wait
#Processing chunk 1
bash DL_and_process_TSO-RepA-Unstim &
bash DL_and_process_TSO-RepC-Stim &
wait
#Processing chunk 2
bash DL_and_process_Biotin-RepA-Unstim &
bash DL_and_process_Biotin-RepD-Unstim &
wait
#Processing chunk 3
bash DL_and_process_Biotin-RepD-Stim &
bash DL_and_process_TSO-RepA-Stim &
wait
#Processing chunk 4
bash DL_and_process_Biotin-RepA-Stim &
bash DL_and_process_TSO-RepD-Unstim &
wait
#Processing chunk 5
bash DL_and_process_Biotin-RepC-Stim &
wait
